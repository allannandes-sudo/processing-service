plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'idea'
	id "org.sonarqube" version "4.0.0.2929"
	id 'org.springdoc.openapi-gradle-plugin' version '1.9.0'
	id 'jacoco'
}
ext {

	set('lombok', "1.18.22")
	set('mapstruct', "1.5.3.Final")
	set('lombokMapstructBindingVersion', "0.2.0")
	set('junit', "4.13.1")
	set('webjars', "5.18.2")
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}
group = 'com.orders'
version = '0.0.1-SNAPSHOT'

repositories {
	mavenCentral()
}


dependencies {
	// Spring
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	//Kafka
	implementation 'org.springframework.kafka:spring-kafka'
	// Reactive Spring
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	// Lombok
	compileOnly "org.projectlombok:lombok:${lombok}"
	annotationProcessor "org.projectlombok:lombok:${lombok}"
	// Mapper
	implementation "org.mapstruct:mapstruct:${mapstruct}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct}"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation "junit:junit:${junit}"
}
test {
	systemProperty "user.language", "en"
	systemProperty "user.country", "US"
	useJUnitPlatform()
}

def jacocoExclusion = [
		'**/annotation/**',
		'**/swagger/**',
		'**/config/**',
		'**/entity/**',
		'**/exception/**',
		'**/mapper/**',
		'**/model/**',
		'**/repository/**',
		'**/enums/**',
		'**/kafka/payload/**',
		'**/Application.java',
		'src/test/java/**'
]

jacocoTestReport {
	dependsOn(test)

	getExecutionData()
			.setFrom(fileTree(buildDir)
					.include("/jacoco/test.exec")
			)

	reports {
		xml.required.set(true)
		html.required.set(true)
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExclusion)
		}))
	}
}

check {
	dependsOn jacocoTestCoverageVerification
}

project.tasks["sonarqube"].dependsOn("jacocoTestReport")

sonarqube {
	properties {
		property "sonar.tests", "src/test/java"
		property "sonar.exclusions", jacocoExclusion.join(",")
	}
}

tasks.withType(Test) {
	reports {
		junitXml.required.set(true)
		html.required.set(true)
	}
	useJUnitPlatform()
	systemProperty "user.language", "en"
	systemProperty "user.country", "US"
}


